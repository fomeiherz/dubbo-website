<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – 核心特性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/</link><description>Recent content in 核心特性 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://static.dubbo.apache.org:8080/zh/overview/what/advantages/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 易用性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/usability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/usability/</guid><description>
&lt;p>Dubbo 通过提供面向开发开发侧的编程框架和一系列服务治理套件，极大的简化了微服务构建的复杂度。从开发层面，Dubbo 通过针对不同语言实现定义了一套微服务开发范式，并提供了配套脚手架用于快速搭建微服务项目骨架；从部署上来说，Dubbo 应用可以打包部署，Dubbo 提供了多种；Dubbo 服务治理是真正从解决微服务生产实践问题的角度出发，提供了除服务发现等能力之外的高阶特性。&lt;/p>
&lt;h2 id="开发">开发&lt;/h2>
&lt;p>Dubbo 提供了用于快速生成微服务项目脚手架的配套工具（浏览器页面或命令行工具），只需要告诉脚手架你期望包含的功能或组件，脚手架最终可以帮助开发者生成具有合理和必要依赖的工程，里面包含必要的第三方依赖、默认配置等，开发者只需要在特定的位置编写业务逻辑，并通过 Dubbo 特有的方式定义和发布服务即可。&lt;/p>
&lt;p>&lt;img src="" alt="脚手架示例图">&lt;/p>
&lt;p>Dubbo 并没有发明一套全新的应用开发模式，而是与业界主流的应用开发框架整合，让开发者可以用流行的应用开发框架开发 Dubbo 应用 &amp;mdash; Dubbo 提供了与应用开发框架模式相匹配的 RPC 服务开发模式。&lt;/p>
&lt;p>这点我们通过 Java 体系的 Spring Boot 解释过，如果开发者选择基于 Spring/Spring Boot 开发微服务，则 Dubbo 就是构建在 Spring Boot 之上的服务开发框架，这里还是以 Spring Boot 为基础的 Dubbo 应用开发为例，只需要增加相应的注解和配置文件就可以了。&lt;/p>
&lt;p>增加 Spring Boot 风格的注解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@EnableDubbo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">public&lt;/span> &lt;span style="color:#268bd2">class&lt;/span> &lt;span style="color:#268bd2">ProviderApplication&lt;/span> &lt;span style="color:#719e07">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@DubboService&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">public&lt;/span> &lt;span style="color:#268bd2">class&lt;/span> &lt;span style="color:#268bd2">DemoServiceImpl&lt;/span> &lt;span style="color:#268bd2">implements&lt;/span> DemoService &lt;span style="color:#719e07">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>application.yml&lt;/code> 配置文件中增加配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">application&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: dubbo-demo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">protocol&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: dubbo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: -&lt;span style="color:#2aa198">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">registry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">address&lt;/span>: zookeeper://127.0.0.1:2181
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于具体语言的脚手架、开发体验可参见：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">Dubbo Java 开发指南&lt;/a>&lt;/li>
&lt;li>&lt;a href="">Dubbo Golang 开发指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>分布式系统中服务组件由不同团队负责开发，服务间如何透明、高效协作是非常影响开发效率的问题，这包括 API 管理、服务测试、服务静态观测等，Dubbo 对此类场景都提供了一些有用的配套工具。关于服务 API 管理，服务查询、测试、Mock 等，可参加 &lt;a href="">Dubbo-Amin&lt;/a> 的详细描述。&lt;/p>
&lt;ul>
&lt;li>Dubbo 提供了类似 Swagger 的 API 管理工具，而对于 IDL 也将开源对应的管理工具&lt;/li>
&lt;li>支持服务测试&lt;/li>
&lt;li>支持服务 Mock&lt;/li>
&lt;li>Admin 服务查询&lt;/li>
&lt;/ul>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>Dubbo 原生服务可打包部署到 Docker 容器、Kubernetes、Service Mesh 等云原生基础设施和微服务架构。&lt;/p>
&lt;p>对 Docker 部署环境，Dubbo 服务最需要解决的就是注册 IP 地址与通信 IP 地址统一的问题，对于这点&lt;/p>
&lt;p>对于 Kubernetes 部署环境，有两种模式
Kubernetes Native Service&lt;/p>
&lt;p>对于 Service Mesh 架构，&lt;/p>
&lt;p>关于不同环境的部署示例，可参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">部署 Dubbo 服务到 Docker 容器&lt;/a>&lt;/li>
&lt;li>&lt;a href="">部署 Dubbo 服务到 Kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="">部署 Dubbo 服务到 Service Mesh&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="治理">治理&lt;/h2>
&lt;p>对于绝大多数用户来说，Dubbo 原生提供的服务治理定义与实现 (服务发现、负载均衡等) 就能满足微服务实践诉求，开发者只需要做两步使用服务治理&lt;/p>
&lt;p>&lt;strong>1. 配置一条注册中心地址&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">registry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">address&lt;/span>: zookeeper://127.0.0.1:2181
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务消费端、提供端都在 dubbo 配置文件中增加以上配置（以 yaml 格式为例），消费端就能自动发现并对提供端地址发起服务调用，将默认采用基于权重的随机负载均衡，且包含超时、失败重试等默认策略。&lt;/p>
&lt;p>&lt;strong>2. 打开 Dubbo Admin 观测服务运行状态&lt;/strong>&lt;/p>
&lt;p>&lt;img src="" alt="Dubbo Admin 运行状态截图">&lt;/p>
&lt;p>服务的基本信息、调用数据等会如上图展示在 Dubbo Admin 之上。&lt;/p>
&lt;p>对于更复杂的微服务实践场景，Dubbo 还提供了更多高级的服务治理特性，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">流量治理&lt;/a>&lt;/li>
&lt;li>&lt;a href="">动态配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="">限流降级&lt;/a>&lt;/li>
&lt;li>&lt;a href="">数据一致性&lt;/a>&lt;/li>
&lt;li>&lt;a href="">可观测性&lt;/a>&lt;/li>
&lt;li>&lt;a href="">多协议&lt;/a>&lt;/li>
&lt;li>&lt;a href="">多注册中心&lt;/a>&lt;/li>
&lt;li>&lt;a href="">Dubbo Mesh&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Overview: 高性能</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/performance/</guid><description>
&lt;p>Dubbo 被设计用于解决阿里巴巴超大规模的电商微服务集群实践，并在各个行业头部企业经过多年的十万、百万规模的微服务实践检验，因此，Dubbo 在通信性能、稳定性方面具有无可比拟的优势，非常适合构建近乎无限水平伸缩的微服务集群，这也是 Dubbo 从实践层面优于业界很多同类的产品的一大巨大优势。&lt;/p>
&lt;h2 id="高性能数据传输">高性能数据传输&lt;/h2>
&lt;p>Dubbo 内置支持 Dubbo2、Triple (兼容 gRPC) 两款高性能通信协议。其中&lt;/p>
&lt;ul>
&lt;li>Dubbo2 是基于 TCP 传输协议之上构建的二进制私有 RPC 通信协议，是一款非常简单、紧凑、高效的通信协议。&lt;/li>
&lt;li>Triple 是基于 HTTP/2 应用层协议之上构建新一代 RPC 通信协议，在网关穿透性、通用性以及 Streaming 通信上都具备优势，同时 Triple 在完全兼容 gRPC 协议的同时，在实现上更具性能优势。&lt;/li>
&lt;/ul>
&lt;p>Dubbo2 benchmark 性能指标&lt;/p>
&lt;p>&lt;img src="" alt="Dubbo2">&lt;/p>
&lt;p>Triple benchmark 性能指标&lt;/p>
&lt;p>&lt;img src="" alt="Triple">&lt;/p>
&lt;p>通过以下内容了解更多协议详情：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../../core-features/protocols">Dubbo 协议支持详情&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="流式通信">流式通信&lt;/h2>
&lt;h2 id="构建可伸缩的微服务集群">构建可伸缩的微服务集群&lt;/h2>
&lt;p>业务增长带来了集群规模的快速增长，而集群规模的增长会对服务治理架构带来挑战，这包括注册中心的存储容量、节点动态变化带来的地址推送与解析效率、高效的网络链接管理、高峰期的流量无损上下线、异常节点的自动节点管理、消费端存储大量网络地址的资源开销等。&lt;/p>
&lt;p>以上很多点都直接关系到了微服务集群的稳定性，因此很容易成为影响集群和业务增长的瓶颈，当集群规模变得越大，问题带来的影响面也就越会被进一步放大。很多开发者可能会想只有几个应用而已，当前不需要并不关心集群规模，但作为技术架构选型的关键因素之一，我们还是要充分考虑微服务集群。并且基于我们对业界大量微服务架构和框架实现的调研，大部分产品的性能瓶颈点可能很快就会到来（一些产品所能高效支持的瓶颈节点规模阈值都是非常低的，比如几十个应用、数百个节点）。&lt;/p>
&lt;p>&lt;img src="" alt="一份对比的 Dubbo、Spring Cloud、Go-Micro、Istio 在不同集群规模下的资源咋用 benchmark，比如模拟10个节点、100个节点、1000 个节点情况下的资源占用情况">&lt;/p>
&lt;p>Dubbo 的优势在于&lt;/p>
&lt;p>通过以下内容了解 Dubbo 构建生产可用的、可伸缩的大规模微服务集群背后的原理：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">Dubbo3 服务发现模型&lt;/a>&lt;/li>
&lt;li>&lt;a href="">流量管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="">源码解析&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Overview: 流量治理</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/traffic-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/traffic-management/</guid><description>
&lt;p>Dubbo 丰富的流量管控规则可以控制服务间的流量走向和 API 调用，基于这些规则可以实现在运行态动态的调整服务行为如超时时间、重试次数、限流参数等，通过控制流量分布可以实现 A/B 测试、金丝雀发布、多版本按比例流量分配、条件匹配路由、黑白名单等，提高系统稳定性。&lt;/p>
&lt;h2 id="dubbo-的流量管控体系">Dubbo 的流量管控体系&lt;/h2>
&lt;p>Dubbo 提供了多种策略和实现，可以很好的管控流入、流出 Dubbo 集群的流量。从 Server 视角来看，部署 Dubbo 应用的实例是时刻在动态变化的，因此消费方 (Dubbo Consumer) 要能随时感知节点变化并将流量均匀的分布到每个实例上，Dubbo 的服务发现与负载均衡机制可以很好的解决这个问题；Dubbo 中有应用、服务和方法的概念，一个应用可以发布多个服务，一个服务包含多个可被调用的方法，从抽象的视角来看，一次 Dubbo 调用就是某个消费方应用发起了对某个提供方 (Dubbo Provider) 应用内的某个服务特定方法的调用，Dubbo 的流量管控规则可以基于应用、服务、方法、参数等粒度精准的控制流量走向。&lt;/p>
&lt;p>Dubbo 服务发现保证调用方随时看到最新的提供方实例地址，服务发现机制依赖注册中心的协调，注册中心可以是 Zookeeper、Nacos 等独立集群，也可以是 Istio 等控制面组件。在消费端，Dubbo 提供了多种负载均衡策略，比如通过随机负载均衡策略能最大限度的做到流量在后端实例上的均匀分布，而一致性哈希负载均衡、基于权重的负载均衡等策略则能满足一些特定场景的流量调度需求。&lt;/p>
&lt;p>从流量管控的视角，一次请求的目标是服务和方法，Dubbo 的流量管控就是根据请求的目标服务、方法以及请求体中的其他附加参数进行匹配的，符合匹配太条件的流量会被按照特定规则转发到一个地址子集。匹配条件最细支持到方法粒度，同时还能根据参数值进行流量转发。如果是基于 http 的 rpc 协议 (如 REST、gRPC、Triple 等)，则服务和方法的就统一转换为 http 的路径 (path)，此时 Dubbo 的流量规则就是基于 http path 和 headers 的流量分发。&lt;/p>
&lt;h2 id="dubbo-流量管控能解决哪些问题">Dubbo 流量管控能解决哪些问题&lt;/h2>
&lt;blockquote>
&lt;p>增加流量分布图、从示例里摘几个。&lt;/p>
&lt;/blockquote>
&lt;p>以上介绍了几种 Dubbo 中支持的流量管控规则，我们可以依赖它们中的一种或多种，通过改变规则中的匹配条件，实现微服务场景中的多种服务治理能力，常见的包括以下一些：&lt;/p>
&lt;ul>
&lt;li>灰度流量隔离&lt;/li>
&lt;li>金丝雀发布&lt;/li>
&lt;li>A/B 测试&lt;/li>
&lt;li>黑白名单&lt;/li>
&lt;li>服务降级&lt;/li>
&lt;li>修改服务行为，如重试、打开访问日志、限流参数等&lt;/li>
&lt;li>超时时间调整&lt;/li>
&lt;li>实例临时拉黑&lt;/li>
&lt;/ul>
&lt;p>可以在 &lt;a href="">流量管理任务&lt;/a> 中了解更多这部分的细节。&lt;/p></description></item><item><title>Overview: 可观测性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/observability/</guid><description>
&lt;p>Dubbo 内部维护了多个纬度的可观测指标，并且支持多种方式的可视化监测。可观测性指标从总体上来说分为三个度量纬度：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Metrics。&lt;/strong> Dubbo 统计了一系列的流量指标如 QPS、RT、成功请求数、失败请求数等，还包括一系列的内部组件状态如线程池数、服务健康状态等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tracing。&lt;/strong> Dubbo 与业界主流的链路追踪工作做了适配，包括 Skywalking、Zipkin、Jaeger 都支持 Dubbo 服务的链路追踪。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Logging。&lt;/strong> Dubbo 支持多种日志框架适配。以 Java 体系为例，支持包括 Slf4j、Log4j2、Log4j、Logback、Jcl 等，用户可以基于业务需要选择合适的框架；同时 Dubbo 还支持 Access Log 记录请求踪迹。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="metrics">Metrics&lt;/h2>
&lt;p>Dubbo 运行时统计了包括 qps、rt、调用总数、成功数、失败数，失败原因统计等在内的核心服务指标，同时，为了更好的监测服务运行状态，Dubbo 还提供了对核心组件状态的监控，如线程池数量、服务健康状态等。&lt;/p>
&lt;p>可以通过 Dubbo Admin 可视化的查看 Metrics 指标&lt;/p>
&lt;p>&lt;img src="" alt="Admin 效果图">&lt;/p>
&lt;p>也可以使用 Grafana、Prometheus 等实现可视化指标监测，具体请参考以下可视化任务示例：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">Admin 任务链接&lt;/a>&lt;/li>
&lt;li>&lt;a href="">Grafana 任务链接&lt;/a>&lt;/li>
&lt;li>&lt;a href="">Prometheus 任务链接&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tracing">Tracing&lt;/h2>
&lt;p>全链路追踪对于监测分布式系统运行状态具有非常重要的价值，Dubbo 通过 Filter 拦截器实现了请求运行时的埋点跟踪，通过将跟踪数据导出到一些主流实现如 Zipkin、Skywalking、Jaeger 等，可以实现全链路跟踪数据的分析与可视化展示。&lt;/p>
&lt;p>只需要简单的一行配置即可切换链路跟踪的后端实现，并且，你可以随时通过 Dubbo Admin 等治理平台动态调整 Dubbo 的链路追踪采样率，对于问题排查都非常有价值。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">基于 Skywalking 实现全链路追踪&lt;/a>&lt;/li>
&lt;li>&lt;a href="">基于 Zipkin 实现全链路追踪&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="logging">Logging&lt;/h2>
&lt;p>访问日志可以帮助分析系统的流量情况，在有些场景下，开启访问日志对于排查问题也非常有帮助。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">开启 Access Log&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Overview: 可扩展性</title><link>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://static.dubbo.apache.org:8080/zh/overview/what/advantages/extensibility/</guid><description>
&lt;p>Dubbo 在设计上是高度可扩展的，通过这些扩展点你可以做到：&lt;/p>
&lt;ul>
&lt;li>拦截流量并控制流量行为&lt;/li>
&lt;li>按需调优 Dubbo 的一些默认策略与实现&lt;/li>
&lt;li>将 Dubbo 服务适配到自己内部微服务集群或其他主流的开源组件&lt;/li>
&lt;/ul>
&lt;h2 id="扩展点定义">扩展点定义&lt;/h2>
&lt;p>Dubbo 扩展能力使得 Dubbo 项目很方便的切分成一个一个的子模块，实现热插拔特性。用户完全可以基于自身需求，替换 Dubbo 原生实现，来满足自身业务需求。&lt;/p>
&lt;p>&lt;img src="http://static.dubbo.apache.org:8080/imgs/v3/concepts/extension-use.png" alt="/imgs/v3/concepts/extension-use.png">&lt;/p>
&lt;p>基于以上扩展点定义，可以实现如下功能的灵活拓展：通信协议、序列化编码协议、流量统计、集群容错策略、路由规则、负载均衡、注册中心、线程池策略、配置中心、分布式事务实现、全链路追踪、监控系统、熔断策略、限流降级等。&lt;/p>
&lt;h2 id="部分官方扩展实现">部分官方扩展实现&lt;/h2>
&lt;p>以下是官方或官方生态项目提供的一些默认实现，更多实现可以在 &lt;a href="">apache/dubbo-spi-extensions&lt;/a> 中了解。&lt;/p>
&lt;p>&lt;img src="http://static.dubbo.apache.org:8080/imgs/v3/concepts/extensibility-echosystem.png" alt="extensibility-echosystem.png">&lt;/p>
&lt;h2 id="扩展示例">扩展示例&lt;/h2>
&lt;p>以下演示了如何扩展 Dubbo 来解决实际问题，可以跟随示例学习。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">自定义负载均衡策略&lt;/a>&lt;/li>
&lt;li>&lt;a href="">自定义的注册中心&lt;/a>&lt;/li>
&lt;li>&lt;a href="">拦截流量&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>还有如下一些高级扩展示例：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="">全链路追踪&lt;/a>&lt;/li>
&lt;li>&lt;a href="">数据一致性&lt;/a>&lt;/li>
&lt;li>&lt;a href="">限流降级&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>